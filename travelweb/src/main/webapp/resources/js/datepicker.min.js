/**
 * 노랑풍선 Web UX DatePicker 스크립트 Framework
 * v.1.4
 * ----------------------------------------------------------------------
 * 작성자		: kgi0412
 * 최종수정일	: 2021.04.22
 * ----------------------------------------------------------------------
 */
!function(t) {
    t.extend({
        _YBdatepicker: function(e, a) {
            var n = t(e)
              , i = {
                _objKey: "ybDatePicker",
                _uid: "yb-datepicker",
                _element: e,
                _isInline: !1,
                _viewDate: new Date,
                _DEF_MIN_DATE: "19000101",
                _DEF_MAX_DATE: "29001231",
                _minDateStr: "19000101",
                _maxDateStr: "29001231",
                value: "",
                start: "month",
                format: "yyyy.MM.dd",
                viewMonthCount: 1,
                minMonthNum: 12,
                maxMonthNum: 24,
                from: {},
                to: {},
                showBoxline: !0,
                isInSideBoxLine: !1,
                isFillDefaultDate: !1,
                allowSelectToday: !0,
                allowSelectPriorToday: !1,
                allowSelectNextToday: !0,
                holidays: [],
                isStatusInfoBar: !1,
                enableAutoPosition: !0,
                onMonthSelected: null,
                _isMonthChanged: !1,
                onMonthChanged: null,
                onDateSelected: null
            };
            a = t.extend(!0, this, i, a),
            this._init = function(e) {
                if (!t.ybDate)
                    return t.ybLog.e(e._objKey, "yb.util.all 또는 yb.util.date 스크립트가 필요합니다."),
                    !1;
                if (e._isInline ? n.addClass("calendar_block") : n.attr("readonly", "readonly"),
                n.val())
                    e._selectedDate(n.val());
                else if (e.isFillDefaultDate) {
                    var a = e.allowSelectToday ? new Date : t.ybDate.getDateDiff({
                        degree: 1
                    });
                    e._selectedDate(t.ybDate.getDateString(a, {
                        format: "yyyyMMdd"
                    }))
                }
                t._YBdatepickerCreation(n, this)
            }
            ,
            this._initStatusData = function() {
                if (!t.isEmptyObject(a.statusData)) {
                    var e = t.extend(!0, {
                        keyColumn: "status",
                        dateColumn: "date"
                    }, a.statusData);
                    if (a.statusData = e,
                    !t.isEmptyObject(a.statusData.info) && "string" === t.type(a.statusData.info)) {
                        var n = {};
                        "RSVN" === a.statusData.info.toUpperCase() ? n = {
                            A: {
                                desc: "예약가능",
                                class: "rev_can"
                            },
                            W: {
                                desc: "예약대기",
                                class: "rev_waiting"
                            },
                            C: {
                                desc: "예약마감",
                                class: "rev_end"
                            }
                        } : "RCPN" === a.statusData.info.toUpperCase() && (n = {
                            A: {
                                desc: "예약접수가능",
                                class: "rev_can"
                            },
                            C: {
                                desc: "예약마감",
                                class: "rev_end"
                            }
                        }),
                        a.statusData.info = n
                    }
                }
            }
            ,
            this._setViewDate = function(e) {
                "date" === t.type(e) && (a._isMonthChanged = a._viewDate.getMonth() !== e.getMonth(),
                a._viewDate = e)
            }
            ,
            this._selectedDate = function(e) {
                a._setViewDate(t.ybDate.getDate(e)),
                a.value = e,
                !a._isInline && n.val(t.ybDate.getDateString(e, {
                    format: a.format
                })),
                !t.isEmptyObject(a.from) && t(a.from).data(a._objKey) && t(a.from).data(a._objKey).setMaxDate(e),
                !t.isEmptyObject(a.to) && t(a.to).data(a._objKey) && t(a.to).data(a._objKey).setMinDate(e),
                a._isInline && this.refresh()
            }
            ,
            this._viewInProcess = function(e) {
                var a = n.find("div.calendar_box")
                  , i = a.find("div.loading");
                e ? i.length ? i.css("visibility", "visible") : t._YBdatepickerProgressView(a, e) : i && i.css("visibility", "hidden")
            }
            ,
            a.value && "string" === t.type(a.value) && 8 == a.value.replace(/[^0-9]/gi, "").length && t.isNumeric(a.value.replace(/[^0-9]/gi, "")) && (a._viewDate = t.ybDate.getDate(a.value)),
            a._uid = t._generateUid(a._uid),
            n.data("UID", a._uid),
            e.tagName && (a._isInline = "INPUT" != e.tagName),
            !a.allowSelectToday && (a._viewDate = t.ybDate.getDateDiff({
                date: a._viewDate,
                degree: 1
            })),
            !a.allowSelectPriorToday && (a._minDateStr = t.ybDate.getDateString(a._viewDate, {
                format: "yyyyMMdd"
            })),
            !a.allowSelectNextToday && (a._maxDateStr = t.ybDate.getDateString(a._viewDate, {
                format: "yyyyMMdd"
            })),
            a.viewMonthCount = a.viewMonthCount < 1 ? 1 : a.viewMonthCount > 2 ? 2 : a.viewMonthCount,
            1 !== a.viewMonthCount && (a.isStatusInfoBar = !1),
            a.minMonthNum > 0 && (a.minMonthNum = -1 * a.minMonthNum),
            a.maxMonthNum < 0 && (a.maxMonthNum = -1 * a.maxMonthNum),
            this._initStatusData(),
            n.data(a._objKey, this),
            this.setStatusData = function(t) {
                a.statusData = t,
                this._initStatusData(),
                a.refresh(!0)
            }
            ,
            this.setMinDate = function(e) {
                t.isEmpty(e) && (e = a._DEF_MIN_DATE),
                this._minDateStr = t.ybDate.getDateString(e, {
                    format: "yyyyMMdd"
                }),
                t.ybDate.getDateString(this._viewDate, {
                    format: "yyyyMMdd"
                }) < this._minDateStr && a._setViewDate(t.ybDate.getDate(e)),
                this.refresh()
            }
            ,
            this.setMaxDate = function(e) {
                t.isEmpty(e) && (e = a._DEF_MAX_DATE),
                this._maxDateStr = t.ybDate.getDateString(e, {
                    format: "yyyyMMdd"
                }),
                t.ybDate.getDateString(this._viewDate, {
                    format: "yyyyMMdd"
                }) > this._maxDateStr && a._setViewDate(t.ybDate.getDate(e)),
                this.refresh()
            }
            ,
            this.prevMonth = function(e) {
                e || (e = 1);
                var n = t.ybDate.getDateDiff({
                    date: a._viewDate,
                    type: "M",
                    degree: e > 0 ? -1 * e : e
                });
                a._setViewDate(n),
                a.refresh()
            }
            ,
            this.nextMonth = function(e) {
                e || (e = 1);
                var n = t.ybDate.getDateDiff({
                    date: a._viewDate,
                    type: "M",
                    degree: e < 0 ? -1 * e : e
                });
                a._setViewDate(n),
                a.refresh()
            }
            ,
            this.reset = function() {
                this._selectedDate(""),
                this.refresh()
            }
            ,
            this.refresh = function(e) {
                (!a.value || 0 === t.trim(a.value).length) && !this._inLine && n.val("");
                var i = n;
                a._isInline ? t._YBdatepickerMakeCalendar(i, a, e) : n.siblings(".calendar_display").each(function(n, s) {
                    if (t(s).data("uid") == a._uid)
                        return i = t(s).find(".calendar_block"),
                        t._YBdatepickerMakeCalendar(i, a, e),
                        !1
                })
            }
            ,
            this.getValue = function() {
                return a.value
            }
            ,
            this.setValue = function(e) {
                if (!e)
                    return a._selectedDate(""),
                    !0;
                if ("date" === t.type(e))
                    return a._selectedDate(t.ybDate.getDateString(e, {
                        format: "yyyyMMdd"
                    })),
                    !0;
                if ("string" === t.type(e)) {
                    var n = e.replace(/[^0-9]/gi, "");
                    if (8 == n.length)
                        return a._selectedDate(n),
                        !0
                }
                return !1
            }
            ,
            this.getDate = function() {
                return t.ybDate.getDate(a.value)
            }
            ,
            this.getShowMonth = function() {
                return t.ybDate.getDateString(a._viewDate, {
                    format: "yyyyMM"
                })
            }
            ,
            this.open = function() {
                n.siblings(".calendar_display").each(function(e, i) {
                    if (t(i).data("uid") == a._uid) {
                        if (!t.isEmptyObject(a.from) && t(a.from).data(a._objKey).close(),
                        !t.isEmptyObject(a.to) && t(a.to).data(a._objKey).close(),
                        a.refresh(),
                        !0 === a.enableAutoPosition) {
                            t("#container, .content_block, .popup_block").css({
                                position: "static"
                            });
                            var s = t.isEmptyObject(a.from) ? n : t(a.from);
                            t(i).css({
                                left: s.offset().left
                            })
                        }
                        return t(i).show(),
                        !1
                    }
                })
            }
            ,
            this.close = function() {
                n.siblings(".calendar_display").each(function(e, n) {
                    if (t(n).data("uid") == a._uid)
                        return t(n).hide(),
                        !0 === a.enableAutoPosition && t("#container, .content_block, .popup_block").css({
                            position: "relative"
                        }),
                        !1
                })
            }
            ,
            this.viewLoading = function(t) {
                a._viewInProcess(t)
            }
            ,
            this._init(a)
        },
        _YBdatepickerCreation: function(e, a) {
            if (!e)
                return t.ybLog.e(a._objKey, "Element를 확인하세요."),
                !1;
            var n = a._isInline ? e : null;
            if (a._isInline || e.addClass("insert_calendar").siblings(".calendar_display").each(function(e, i) {
                t(this).data("uid") == a._uid && (n = t(i).find(".calendar_block"))
            }),
            !n || n.length < 1) {
                var i = t("<div/>", {
                    class: "calendar_display"
                }).data("uid", a._uid).appendTo(e.parent());
                e.off("click").on("click", function(t) {
                    "none" !== i.css("display") ? a.close() : a.open()
                }),
                n = t("<div/>", {
                    class: "calendar_block"
                }).appendTo(i)
            }
            n.data(a._objKey, a);
            var s = n.find(".calendar_box");
            if (!s || s.length < a.viewMonthCount) {
                n.empty();
                for (var o = 0; o < a.viewMonthCount; o++) {
                    var d = t("<div/>", {
                        class: "calendar_box"
                    }).data("idx", o).appendTo(n);
                    (3 == a.viewMonthCount ? 1 == o : 0 == o) && d.data("isMonthSelect", !0),
                    0 == o && d.data("isPrevBtn", !0),
                    o == a.viewMonthCount - 1 && d.data("isNextBtn", !0);
                    var r = 3 == a.viewMonthCount ? o - 1 : o;
                    d.data("diffMonth", r)
                }
                s = n.find(".calendar_box")
            }
            if (a.showBoxline && a._isInline && s.addClass(a.isInSideBoxLine ? "inside" : "line"),
            s.addClass("bgg"),
            t._YBdatepickerMakeCalendar(n, a),
            a.isStatusInfoBar) {
                if (!t.isEmptyObject(a.statusData) && !t.isEmptyObject(a.statusData.info) && "object" === t.type(a.statusData.info)) {
                    var l = t("<ul/>", {
                        class: "rev_list"
                    }).appendTo(n)
                      , c = a.statusData.info;
                    for (itm in c)
                        l.append(t("<li/>").append(t("<span/>", {
                            class: c[itm].class
                        })).append(c[itm].desc))
                }
            } else {
                var p = t("<button/>", {
                    type: "button",
                    class: "btn_reset"
                }).text("날짜 재선택");
                t("<div/>", {
                    class: "cdn_reset"
                }).append(p).appendTo(n),
                p.off("click").on("click", function() {
                    a.reset()
                })
            }
        },
        _YBdatepickerMakeCalendar: function(e, a, n) {
            var i = e.find(".calendar_box");
            i.empty(),
            i.each(function(e, n) {
                t._YBdatepickerCalendarControlBar(t(this), a),
                t._YBdatepickerCalendarOfDate(t(this), a)
            });
            var s = a.onMonthChanged;
            "function" === t.type(s) && a._isMonthChanged && !n && s(t.ybDate.getDateString(a._viewDate, {
                format: "yyyyMM"
            })),
            i.off("click").on("click", "table.tbl_calendar tbody td a", function(e) {
                t(this).parents("tbody:eq(0)").find("td a").removeClass("active"),
                t(this).addClass("active");
                var n = t(this).data("date")
                  , i = t(this).data("sdata");
                a._selectedDate(n),
                a.close();
                var s = a.onDateSelected;
                "function" === t.type(s) && s(t.ybDate.getDate(n, {
                    format: a.format
                }), i)
            })
        },
        _YBdatepickerCalendarControlBar: function(e, a) {
            var n = t.ybDate.getDateDiff({
                date: a._viewDate,
                type: "M",
                degree: e.data("diffMonth"),
                format: "yyyyMM"
            });
            e.data("yyyyMM", n);
            var i = t("<div/>", {
                class: "calendar_month"
            })
              , s = t("<button/>", {
                type: "button",
                class: "btn_calendar_month"
            }).text(n.substr(0, 4) + "." + n.substr(4, 2));
            if (e.data("isMonthSelect")) {
                for (var o = t("<ul/>", {
                    class: "month_list",
                    style: "display:none"
                }), d = a.minMonthNum; d < a.maxMonthNum; d++) {
                    var r = t.ybDate.getDateDiff({
                        date: n + "01",
                        type: "M",
                        degree: d,
                        format: "yyyyMM"
                    });
                    !a._minDateStr && (a._minDateStr = a._DEF_MIN_DATE),
                    !a._maxDateStr && (a._maxDateStr = a._DEF_MAX_DATE),
                    a._minDateStr.substr(0, 6) <= r && a._maxDateStr.substr(0, 6) >= r && t("<li>").append(t("<a/>", {
                        href: "#" + r
                    }).text(r.substr(0, 4) + "." + r.substr(4)).data("date", r)).appendTo(o)
                }
                s.off("click").on("click", function(e) {
                    var a = t(this).siblings("ul.month_list");
                    "none" !== a.css("display") ? a.hide() : a.show()
                }),
                o.off("click").on("click", "li a", function(n) {
                    var i = t(this).data("date")
                      , s = t.ybDate.getDate(i + "01");
                    a._setViewDate(s),
                    t._YBdatepickerMakeCalendar(e.parents(".calendar_block"), a);
                    var o = a.onMonthSelected;
                    "function" === t.type(o) && a._isInline && o(i, s)
                })
            } else
                s.attr("disabled", "disabled");
            if (e.data("isPrevBtn")) {
                var l = t("<button/>", {
                    type: "button",
                    class: "btn_calendar_prev"
                }).append(t("<span/>").text("이전달"));
                parseInt(a._minDateStr, 10) >= parseInt(n + "01", 10) && l.attr("disabled", "disabled"),
                l.off("click").on("click", function(n) {
                    var i = t.ybDate.getDateDiff({
                        date: a._viewDate,
                        type: "M",
                        degree: -1
                    });
                    a._setViewDate(i),
                    t._YBdatepickerMakeCalendar(e.parents(".calendar_block"), a)
                })
            }
            if (e.data("isNextBtn")) {
                var c = t("<button/>", {
                    type: "button",
                    class: "btn_calendar_next"
                }).append(t("<span/>").text("다음달"));
                parseInt(a._maxDateStr, 10) <= parseInt(n + t.ybDate.getLastDate(n + "01").getDate(), 10) && c.attr("disabled", "disabled"),
                c.off("click").on("click", function(n) {
                    var i = t.ybDate.getDateDiff({
                        date: a._viewDate,
                        type: "M",
                        degree: 1
                    });
                    a._setViewDate(i),
                    t._YBdatepickerMakeCalendar(e.parents(".calendar_block"), a)
                })
            }
            i.append(s, o, l, c).appendTo(e)
        },
        _YBdatepickerCalendarOfDate: function(e, a) {
            var n = t("<table/>", {
                class: "tbl_calendar"
            }).append(t("<caption/>").text("달력"))
              , i = t("<thead/>").append(t("<tr/>")).appendTo(n);
            t("<th/>", {
                scope: "col"
            }).append(t("<span/>", {
                title: "일요일"
            }).text("S")).appendTo(i.find("tr")),
            t("<th/>", {
                scope: "col"
            }).append(t("<span/>", {
                title: "월요일"
            }).text("M")).appendTo(i.find("tr")),
            t("<th/>", {
                scope: "col"
            }).append(t("<span/>", {
                title: "화요일"
            }).text("T")).appendTo(i.find("tr")),
            t("<th/>", {
                scope: "col"
            }).append(t("<span/>", {
                title: "수요일"
            }).text("W")).appendTo(i.find("tr")),
            t("<th/>", {
                scope: "col"
            }).append(t("<span/>", {
                title: "목요일"
            }).text("T")).appendTo(i.find("tr")),
            t("<th/>", {
                scope: "col"
            }).append(t("<span/>", {
                title: "금요일"
            }).text("F")).appendTo(i.find("tr")),
            t("<th/>", {
                scope: "col"
            }).append(t("<span/>", {
                title: "토요일"
            }).text("S")).appendTo(i.find("tr"));
            for (var s = t("<tbody/>").appendTo(n), o = e.data("yyyyMM"), d = t.ybDate.getLastDate(o + "01").getDate(), r = t.ybDate.getDateString(new Date, {
                format: "yyyyMMdd"
            }), l = 0; l < d; l++) {
                var c, p = t.addZeroTwo(l + 1), y = o + String(p), f = t.ybDate.getDate(y).getDay();
                if (l > 0 && 0 == f && (c && s.append(c),
                c = new t("<tr/>")),
                0 == l) {
                    c = new t("<tr/>");
                    for (var _ = 0; _ < f; _++)
                        t("<td/>").appendTo(c)
                }
                var u = new t("<td/>")
                  , D = !1;
                if (y < r ? D = a.allowSelectPriorToday : y > r ? D = a.allowSelectNextToday : (u.addClass("today").attr("title", "오늘"),
                D = a.allowSelectToday),
                D && a._minDateStr <= y && y <= a._maxDateStr ? (t("<a/>", {
                    href: "#" + y
                }).text(p).appendTo(u).data("date", y),
                a.value == y && u.find("a").addClass("active")) : u.text(p),
                (u = t._YBdatepickerStatusDate(u, a)).appendTo(c),
                p == d) {
                    for (_ = f; _ < 6; _++)
                        t("<td/>").appendTo(c);
                    c && s.append(c)
                }
            }
            e.append(n)
        },
        _YBdatepickerProgressView: function(e, a) {
            t("<div/>").addClass("loading").prependTo(e)
        },
        _YBdatepickerStatusDate: function(e, a) {
            var n = a.statusData
              , i = e.find("a").data("date");
            return t.isEmptyObject(n) || t.isEmptyObject(n.info) || "object" !== t.type(n.info) || t.isEmptyObject(n.dates) || "array" !== t.type(n.dates) || !i || (t.each(n.dates, function(t, a) {
                var s = n.info
                  , o = a[n.keyColumn];
                if (i == a[n.dateColumn] && s[o] && (e = e.attr({
                    class: s[o].class,
                    title: s[o].desc
                })).data("isStatus", !0),
                i == a[n.dateColumn])
                    return e.find("a").data("sdata", a),
                    !1
            }),
            e.data("isStatus") || (e = e.text(i.substr(6)))),
            e
        },
        ybDatePicker: function(e, a) {
            var n, i;
            return "string" === t.type(e) ? (n = t(e),
            a && "object" === t.type(a) && (i = a)) : t.ybLog.e(t._YBdatepicker._objKey, "첫번째 인자가 $선택자(selector)인지 확인하세요."),
            n && n.ybDatePicker(i).data(t._YBdatepicker._objKey)
        }
    }),
    t.fn.extend({
        ybDatePicker: function(e) {
            return this.each(function(a, n) {
                new t._YBdatepicker(n,e)
            })
        }
    }),
    t(document).on("click", "#wrap", function(e) {
        t(".insert_calendar").is(e.target) || t(".calendar_display").has(e.target).length || (t(".calendar_display").hide(),
        t("#container, .content_block").css({
            position: "relative"
        }))
    })
}(jQuery);
